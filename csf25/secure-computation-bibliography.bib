@incollection{goldreich2019play,
  title={How to play any mental game, or a completeness theorem for protocols with honest majority},
  author={Goldreich, Oded and Micali, Silvio and Wigderson, Avi},
  booktitle={Providing Sound Foundations for Cryptography: On the Work of Shafi Goldwasser and Silvio Micali},
  pages={307--328},
  year={2019}
}


% PPL

@article{li2023lilac,
  title={Lilac: a Modal Separation Logic for Conditional Probability},
  author={Li, John M and Ahmed, Amal and Holtzen, Steven},
  journal={Proceedings of the ACM on Programming Languages},
  volume={7},
  number={PLDI},
  pages={148--171},
  year={2023},
  publisher={ACM New York, NY, USA}
}

@article{holtzen2020scaling,
  title={Scaling exact inference for discrete probabilistic programs},
  author={Holtzen, Steven and Van den Broeck, Guy and Millstein, Todd},
  journal={Proceedings of the ACM on Programming Languages},
  volume={4},
  number={OOPSLA},
  pages={1--31},
  year={2020},
  publisher={ACM New York, NY, USA}
}

@article{carpenter2017stan,
  title={Stan: A probabilistic programming language},
  author={Carpenter, Bob and Gelman, Andrew and Hoffman, Matthew D and Lee, Daniel and Goodrich, Ben and Betancourt, Michael and Brubaker, Marcus A and Guo, Jiqiang and Li, Peter and Riddell, Allen},
  journal={Journal of statistical software},
  volume={76},
  year={2017},
  publisher={NIH Public Access}
}

@inproceedings{wood2014new,
  title={A new approach to probabilistic programming inference},
  author={Wood, Frank and Meent, Jan Willem and Mansinghka, Vikash},
  booktitle={Artificial intelligence and statistics},
  pages={1024--1032},
  year={2014},
  organization={PMLR}
}

@article{bingham2019pyro,
  title={Pyro: Deep universal probabilistic programming},
  author={Bingham, Eli and Chen, Jonathan P and Jankowiak, Martin and Obermeyer, Fritz and Pradhan, Neeraj and Karaletsos, Theofanis and Singh, Rohit and Szerlip, Paul and Horsfall, Paul and Goodman, Noah D},
  journal={The Journal of Machine Learning Research},
  volume={20},
  number={1},
  pages={973--978},
  year={2019},
  publisher={JMLR. org}
}

@article{albarghouthi2017fairsquare,
  title={Fairsquare: probabilistic verification of program fairness},
  author={Albarghouthi, Aws and D'Antoni, Loris and Drews, Samuel and Nori, Aditya V},
  journal={Proceedings of the ACM on Programming Languages},
  volume={1},
  number={OOPSLA},
  pages={1--30},
  year={2017},
  publisher={ACM New York, NY, USA}
}

@inproceedings{de2007problog,
  title={ProbLog: A probabilistic Prolog and its application in link discovery},
  author={De Raedt, Luc and Kimmig, Angelika and Toivonen, Hannu},
  booktitle={IJCAI 2007, Proceedings of the 20th international joint conference on artificial intelligence},
  pages={2462--2467},
  year={2007},
  organization={IJCAI-INT JOINT CONF ARTIF INTELL}
}

@article{pfeffer2009figaro,
  title={Figaro: An object-oriented probabilistic programming language},
  author={Pfeffer, Avi},
  journal={Charles River Analytics Technical Report},
  volume={137},
  number={96},
  pages={4},
  year={2009}
}

@inproceedings{saad2021sppl,
  title={SPPL: probabilistic programming with fast exact symbolic inference},
  author={Saad, Feras A and Rinard, Martin C and Mansinghka, Vikash K},
  booktitle={Proceedings of the 42nd ACM SIGPLAN International Conference on Programming Language Design and Implementation},
  pages={804--819},
  year={2021}
}

%%%%%%%%%%%
% http://www.cs.umd.edu/~mwh/papers/wysstar.pdf

@inproceedings{rastogi2019textsc,
  title={$$$\backslash$textsc $\{$Wys$\}$\^{}$\backslash$star $$: A DSL for Verified Secure Multi-party Computations},
  author={Rastogi, Aseem and Swamy, Nikhil and Hicks, Michael},
  booktitle={International Conference on Principles of Security and Trust},
  pages={99--122},
  year={2019},
  organization={Springer}
}


%%%%%%%%%%%
% https://par.nsf.gov/servlets/purl/10099282

@article{evans2018pragmatic,
  title={A pragmatic introduction to secure multi-party computation},
  author={Evans, David and Kolesnikov, Vladimir and Rosulek, Mike and others},
  journal={Foundations and Trends{\textregistered} in Privacy and Security},
  volume={2},
  number={2-3},
  pages={70--246},
  year={2018},
  publisher={Now Publishers, Inc.}
}


%%%%% NEXT TWO SECURITY TYPES!!
%%%%%%%%%%%
% https://ieeexplore.ieee.org/abstract/document/8429301/

@inproceedings{almeida2018enforcing,
  title={Enforcing ideal-world leakage bounds in real-world secret sharing MPC frameworks},
  author={Almeida, Jos{\'e} Bacelar and Barbosa, Manuel and Barthe, Gilles and Pacheco, Hugo and Pereira, Vitor and Portela, Bernardo},
  booktitle={2018 IEEE 31st Computer Security Foundations Symposium (CSF)},
  pages={132--146},
  year={2018},
  organization={IEEE}
}

%%%%%%%%%%%
% https://eprint.iacr.org/2012/205.pdf
@INPROCEEDINGS{6266151,
  author={Mitchell, John C. and Sharma, Rahul and Stefan, Deian and Zimmerman, Joe},
  booktitle={2012 IEEE 25th Computer Security Foundations Symposium}, 
  title={Information-Flow Control for Programming on Encrypted Data}, 
  year={2012},
  volume={},
  number={},
  pages={45-60},
  keywords={Servers;Encryption;Electronic mail;Syntactics;Standards;information flow control;secure cloud computing;domain-specific languages;homomorphic encryption;multiparty computation},
  doi={10.1109/CSF.2012.30}}


%%%%%%%%%%%
% https://eprint.iacr.org/2012/205.pdf

@inproceedings{mitchell2012information,
  title={Information-flow control for programming on encrypted data},
  author={Mitchell, John C and Sharma, Rahul and Stefan, Deian and Zimmerman, Joe},
  booktitle={2012 IEEE 25th Computer Security Foundations Symposium},
  pages={45--60},
  year={2012},
  organization={IEEE}
}


%%%%%%%%%%%
% https://boriskoepf.de/papers/sfm13.pdf

@inproceedings{kopf2013automation,
  title={Automation of quantitative information-flow analysis},
  author={K{\"o}pf, Boris and Rybalchenko, Andrey},
  booktitle={International School on Formal Methods for the Design of Computer, Communication and Software Systems},
  pages={1--28},
  year={2013},
  organization={Springer}
}


%%%%%%%%%%%
% https://ieeexplore.ieee.org/abstract/document/6956593

@inproceedings{rastogi2014wysteria,
  title={Wysteria: A programming language for generic, mixed-mode multiparty computations},
  author={Rastogi, Aseem and Hammer, Matthew A and Hicks, Michael},
  booktitle={2014 IEEE Symposium on Security and Privacy},
  pages={655--670},
  year={2014},
  organization={IEEE}
}


%%%%%%%%%%%
% https://arxiv.org/abs/1907.10708

@article{barthe2019probabilistic,
@author = {Barthe, Gilles and Hsu, Justin and Liao, Kevin},
title = {A probabilistic separation logic},
year = {2019},
issue_date = {January 2020},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {4},
number = {POPL},
url = {https://doi.org/10.1145/3371123},
doi = {10.1145/3371123},
abstract = {Probabilistic independence is a useful concept for describing the result of random sampling—a basic operation in all probabilistic languages—and for reasoning about groups of random variables. Nevertheless, existing verification methods handle independence poorly, if at all. We propose a probabili stic separation logic PSL, where separation models probabilistic independence. We first give a new, probabilistic model of the logic of bunched implications (BI). We then build a program logic based on these assertions, and prove soundness of the proof system. We demonstrate our logic by verifying information-theoretic security of cryptographic constructions for several well-known tasks, including private information retrieval, oblivious transfer, secure multi-party addition, and simple oblivious RAM. Our proofs reason purely in terms of high-level properties, like independence and uniformity.},
journal = {Proc. ACM Program. Lang.},
month = {dec},
articleno = {55},
numpages = {30},
keywords = {probabilistic independence, separation logic, verified cryptography}
}

%%%%%%%%%%%
% http://david.darais.com/assets/papers/lang-for-prob-obliv/lpo.pdf

@article{darais2019language,
  title={A language for probabilistically oblivious computation},
  author={Darais, David and Sweet, Ian and Liu, Chang and Hicks, Michael},
  journal={Proceedings of the ACM on Programming Languages},
  volume={4},
  number={POPL},
  pages={1--31},
  year={2019},
  publisher={ACM New York, NY, USA}
}


%%%%%%%%%%%
% https://users-cs.au.dk/askarov/lbs-course/2017/reading/fossacs09.pdf

@inproceedings{smith2009foundations,
  title={On the foundations of quantitative information flow},
  author={Smith, Geoffrey},
  booktitle={International Conference on Foundations of Software Science and Computational Structures},
  pages={288--302},
  year={2009},
  organization={Springer}
}


%%%%%%%%%%%
% https://www.polymtl.ca/crac/INF6602/papiers2009/schneider2000.pdf

@article{schneider2000enforceable,
  title={Enforceable security policies},
  author={Schneider, Fred B},
  journal={ACM Transactions on Information and System Security (TISSEC)},
  volume={3},
  number={1},
  pages={30--50},
  year={2000},
  publisher={ACM New York, NY, USA}
}

%%%%%%%%%%%
% https://www.cis.upenn.edu/~stevez/papers/LZ05a.pdf

@inproceedings{li2005downgrading,
  title={Downgrading policies and relaxed noninterference},
  author={Li, Peng and Zdancewic, Steve},
  booktitle={Proceedings of the 32nd ACM SIGPLAN-SIGACT symposium on Principles of programming languages},
  pages={158--170},
  year={2005}
}


%%%%%%%%%%%
% http://www.cs.ox.ac.uk/people/jeremy.gibbons/publications/kuifje.pdf


@article{gibbons2020quantitative,
  title={Quantitative information flow with monads in haskell},
  author={Gibbons, Jeremy and McIver, Annabelle and Morgan, Carroll and Schrijvers, Tom},
  journal={Foundations of Probabilistic Programming},
  pages={391},
  year={2020}
}


%%%%%%%%%%%
% http://www.cs.cornell.edu/~jnfoster/papers/updatable-security-views.pdf

@inproceedings{foster2009updatable,
  title={Updatable security views},
  author={Foster, J Nathan and Pierce, Benjamin C and Zdancewic, Steve},
  booktitle={2009 22nd IEEE Computer Security Foundations Symposium},
  pages={60--74},
  year={2009},
  organization={IEEE}
}


%%%%%%%%%%%
% https://encrypto.de/papers/SZ13.pdf

@inproceedings{schneider2013gmw,
  title={GMW vs. Yao? Efficient secure two-party computation with low depth circuits},
  author={Schneider, Thomas and Zohner, Michael},
  booktitle={International Conference on Financial Cryptography and Data Security},
  pages={275--292},
  year={2013},
  organization={Springer}
}


%%%%%%%%%%%
% https://cise.ufl.edu/~butler/pubs/eurosp16.pdf

@inproceedings{mood2016frigate,
  title={Frigate: A validated, extensible, and efficient compiler and interpreter for secure computation},
  author={Mood, Benjamin and Gupta, Debayan and Carter, Henry and Butler, Kevin and Traynor, Patrick},
  booktitle={2016 IEEE European Symposium on Security and Privacy (EuroS\&P)},
  pages={112--127},
  year={2016},
  organization={IEEE}
}


%%%%%%%%%%%
% http://elaineshi.com/docs/oblivm.pdf

@inproceedings{liu2015oblivm,
  title={Oblivm: A programming framework for secure computation},
  author={Liu, Chang and Wang, Xiao Shaun and Nayak, Kartik and Huang, Yan and Shi, Elaine},
  booktitle={2015 IEEE Symposium on Security and Privacy},
  pages={359--376},
  year={2015},
  organization={IEEE}
}


%%%%%%%%%%%
% https://ieeexplore.ieee.org/abstract/document/7163039/

@inproceedings{songhori2015tinygarble,
  title={Tinygarble: Highly compressed and scalable sequential garbled circuits},
  author={Songhori, Ebrahim M and Hussain, Siam U and Sadeghi, Ahmad-Reza and Schneider, Thomas and Koushanfar, Farinaz},
  booktitle={2015 IEEE Symposium on Security and Privacy},
  pages={411--428},
  year={2015},
  organization={IEEE}
}


%%%%%%%%%%%
% https://eprint.iacr.org/2016/814

@inproceedings{jafargholi2016adaptive,
  title={Adaptive security of Yao’s garbled circuits},
  author={Jafargholi, Zahra and Wichs, Daniel},
  booktitle={Theory of Cryptography Conference},
  pages={433--458},
  year={2016},
  organization={Springer}
}


%%%%%%%%%%%
% https://ieeexplore.ieee.org/abstract/document/4568207/

@inproceedings{yao1986generate,
  title={How to generate and exchange secrets},
  author={Yao, Andrew Chi-Chih},
  booktitle={27th Annual Symposium on Foundations of Computer Science (sfcs 1986)},
  pages={162--167},
  year={1986},
  organization={IEEE}
}


%%%%%%%%%%%
% https://link.springer.com/chapter/10.1007/978-3-319-45741-3_5

@inproceedings{buscher2016compiling,
  title={Compiling low depth circuits for practical secure computation},
  author={B{\"u}scher, Niklas and Holzer, Andreas and Weber, Alina and Katzenbeisser, Stefan},
  booktitle={European Symposium on Research in Computer Security},
  pages={80--98},
  year={2016},
  organization={Springer}
}


%%%%%%%%%%%
% https://ieeexplore.ieee.org/abstract/document/9702293/

@inproceedings{patra2021syncirc,
  title={SynCirc: Efficient Synthesis of Depth-Optimized Circuits for Secure Computation},
  author={Patra, Arpita and Schneider, Thomas and Suresh, Ajith and Yalame, Hossein},
  booktitle={2021 IEEE International Symposium on Hardware Oriented Security and Trust (HOST)},
  pages={147--157},
  year={2021},
  organization={IEEE}
}


%%%%%%%%%%%
% https://dl.acm.org/doi/abs/10.1145/2382196.2382279

@inproceedings{bellare2012foundations,
  title={Foundations of garbled circuits},
  author={Bellare, Mihir and Hoang, Viet Tung and Rogaway, Phillip},
  booktitle={Proceedings of the 2012 ACM conference on Computer and communications security},
  pages={784--796},
  year={2012}
}


%%%%%%%%%%%
% https://www.usenix.org/conference/usenixsecurity12/technical-sessions/presentation/kreuter

@inproceedings{kreuter2012billion,
  title={$\{$Billion-Gate$\}$ Secure Computation with Malicious Adversaries},
  author={Kreuter, Benjamin and Shelat, Abhi and Shen, Chih-Hao},
  booktitle={21st USENIX Security Symposium (USENIX Security 12)},
  pages={285--300},
  year={2012}
}

%%%%%%%%%%%
% https://www.cs.ucdavis.edu/~rogaway/papers/tate03.pdf

@article{tate2003garbled,
  title={On garbled circuits and constant round secure function evaluation},
  author={Tate, Stephen R and Xu, Ke},
  journal={CoPS Lab, University of North Texas, Tech. Rep},
  volume={2},
  pages={2003},
  year={2003},
  publisher={Citeseer}
}

%%%%%%%%%%%%
% https://eprint.iacr.org/2023/530.pdf
@article{nieminen2023breaking,
  title={Breaking and fixing garbled circuits when a gate has duplicate input wires},
  author={Nieminen, Raine and Schneider, Thomas},
  journal={Cryptology ePrint Archive},
  year={2023}
}

% https://dl.acm.org/doi/10.1145/292540.292560
@inproceedings{10.1145/292540.292560, author = {Xi, Hongwei and Pfenning, Frank}, title = {Dependent Types in Practical Programming}, year = {1999}, isbn = {1581130953}, publisher = {Association for Computing Machinery}, address = {New York, NY, USA}, url = {https://doi.org/10.1145/292540.292560}, doi = {10.1145/292540.292560}, abstract = {We present an approach to enriching the type system of ML with a restricted form of dependent types, where type index objects are drawn from a constraint domain C, leading to the DML(C) language schema. This allows specification and inference of significantly more precise type information, facilitating program error detection and compiler optimization. A major complication resulting from introducing dependent types is that pure type inference for the enriched system is no longer possible, but we show that type-checking a sufficiently annotated program in DML(C) can be reduced to constraint satisfaction in the constraint domain C. We exhibit the unobtrusiveness of our approach through practical examples and prove that DML(C) is conservative over ML. The main contribution of the paper lies in our language design, including the formulation of type-checking rules which makes the approach practical. To our knowledge, no previous type system for a general purpose programming language such as ML has combined dependent types with features including datatype declarations, higher-order functions, general recursions, let-polymorphism, mutable references, and exceptions. In addition, we have finished a prototype implementation of DML(C) for an integer constraint domain C, where constraints are linear inequalities (Xi and Pfenning 1998).}, booktitle = {Proceedings of the 26th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages}, pages = {214-227}, numpages = {14}, location = {San Antonio, Texas, USA}, series = {POPL '99} }

@inproceedings {269581,
author = {Dahlia Malkhi and Noam Nisan and Benny Pinkas and Yaron Sella},
title = {{Fairplay{\textemdash}A} Secure {Two-Party} Computation System},
booktitle = {13th USENIX Security Symposium (USENIX Security 04)},
year = {2004},
address = {San Diego, CA},
url = {https://www.usenix.org/conference/13th-usenix-security-symposium/fairplay{\textemdash}-secure-two-party-computation-system},
publisher = {USENIX Association},
month = aug,
}

%%%%%%%%%%%%%%%%%%%%%

@ARTICLE{1159651,
  author={Sabelfeld, A. and Myers, A.C.},
  journal={IEEE Journal on Selected Areas in Communications}, 
  title={Language-based information-flow security}, 
  year={2003},
  volume={21},
  number={1},
  pages={5-19},
  doi={10.1109/JSAC.2002.806121}}

%%%%%%%%%%%%%%%%%%%%

@article{10.5555/1891823.1891830, author = {Clarkson, Michael R. and Schneider, Fred B.}, title = {Hyperproperties}, year = {2010}, issue_date = {September 2010}, publisher = {IOS Press}, address = {NLD}, volume = {18}, number = {6}, issn = {0926-227X}, abstract = {Trace properties, which have long been used for reasoning about systems, are sets of execution traces. Hyperproperties, introduced here, are sets of trace properties. Hyperproperties can express security policies, such as secure information flow and service level agreements, that trace properties cannot. Safety and liveness are generalized to hyperproperties, and every hyperproperty is shown to be the intersection of a safety hyperproperty and a liveness hyperproperty. A verification technique for safety hyperproperties is given and is shown to generalize prior techniques for verifying secure information flow. Refinement is shown to be applicable with safety hyperproperties. A topological characterization of hyperproperties is given.}, journal = {J. Comput. Secur.}, month = {sep}, pages = {1157-1210}, numpages = {54}, keywords = {information flow, liveness, safety, Security policies} }

%%%%%%%%%%%%%%%%%%%%%%%

@Inbook{Lindell2017,
author="Lindell, Yehuda",
editor="Lindell, Yehuda",
title="How to Simulate It -- A Tutorial on the Simulation Proof Technique",
bookTitle="Tutorials on the Foundations of Cryptography: Dedicated to Oded Goldreich",
year="2017",
publisher="Springer International Publishing",
address="Cham",
pages="277--346",
abstract="One of the most fundamental notions of cryptography is that of simulation. It stands behind the concepts of semantic security, zero knowledge, and security for multiparty computation. However, writing a simulator and proving security via the use of simulation is a nontrivial task, and one that many newcomers to the field often find difficult. In this tutorial, we provide a guide to how to write simulators and prove security via the simulation paradigm. Although we have tried to make this tutorial as stand-alone as possible, we assume some familiarity with the notions of secure encryption, zero-knowledge, and secure computation.",
isbn="978-3-319-57048-8",
doi="10.1007/978-3-319-57048-8_6",
url="https://doi.org/10.1007/978-3-319-57048-8_6"
}

%%%%%%%%%%%%%%%%%%%

@inproceedings{10.1145/2637113.2637119,
author = {Bogdanov, Dan and Laud, Peeter and Randmets, Jaak},
title = {Domain-Polymorphic Programming of Privacy-Preserving Applications},
year = {2014},
isbn = {9781450328623},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2637113.2637119},
doi = {10.1145/2637113.2637119},
abstract = {Secure Multi-party Computation (SMC) is seen as one of the main enablers for secure outsourcing of computation. Currently, there are many different SMC techniques (garbled circuits, secret sharing, homomorphic encryption, etc.) and none of them is clearly superior to others in terms of efficiency, security guarantees, ease of implementation, etc. For maximum efficiency, and for obeying the trust policies, a privacy-preserving application may wish to use several different SMC techniques for different operations it performs. A straightforward implementation of this application may result in a program that (i) contains a lot of duplicated code, differing only in the used SMC technique; (ii) is difficult to maintain, if policies or SMC implementations change; and (iii) is difficult to reuse in similar applications using different SMC techniques.In this paper, we propose a programming language called SecreC with associated compilation techniques for simple orchestration of multiple SMC techniques and multiple protection domains. It is a simple imperative language with function calls where the types of data items are annotated with protection domains and where the function declarations may be domain-polymorphic. This allows most of the program code working with private data to be written in a SMC-technique-agnostic manner. It also allows rapid deployment of new SMC techniques and implementations in existing applications. We have implemented the compiler for the language, integrated it with Sharemind SMC framework, and are currently using it for new privacy-preserving applications.},
booktitle = {Proceedings of the Ninth Workshop on Programming Languages and Analysis for Security},
pages = {53-65},
numpages = {13},
keywords = {Secure Multi-Party Computation, Software Engineering},
location = {Uppsala, Sweden},
series = {PLAS'14}
}

%%%%%%%%%%%%%%%%%%%

@InProceedings{10.1007/978-3-540-37621-7_9,
author="Sabelfeld, Andrei
and Myers, Andrew C.",
editor="Futatsugi, Kokichi
and Mizoguchi, Fumio
and Yonezaki, Naoki",
title="A Model for Delimited Information Release",
booktitle="Software Security - Theories and Systems",
year="2004",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="174--191",
abstract="Much work on security-typed languages lacks a satisfactory account of intentional information release. In the context of confidentiality, a typical security guarantee provided by security type systems is noninterference, which allows no information flow from secret inputs to public outputs. However, many intuitively secure programs do allow some release, or declassification, of secret information (e.g., password checking, information purchase, and spreadsheet computation). Noninterference fails to recognize such programs as secure. In this respect, many security type systems enforcing noninterference are impractical. On the other side of the spectrum are type systems designed to accommodate some information leakage. However, there is often little or no guarantee about what is actually being leaked. As a consequence, such type systems are vulnerable to laundering attacks, which exploit declassification mechanisms to reveal more secret data than intended. To bridge this gap, this paper introduces a new security property, delimited release, an end-to-end guarantee that declassification cannot be exploited to construct laundering attacks. In addition, a security type system is given that straightforwardly and provably enforces delimited release.",
isbn="978-3-540-37621-7"
}

%%%%%%%%%%%%%%%%%%%

@inproceedings{10.1145/1040305.1040319,
author = {Li, Peng and Zdancewic, Steve},
title = {Downgrading Policies and Relaxed Noninterference},
year = {2005},
isbn = {158113830X},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1040305.1040319},
doi = {10.1145/1040305.1040319},
abstract = {In traditional information-flow type systems, the security policy is often formalized as noninterference properties. However, noninterference alone is too strong to express security properties useful in practice. If we allow downgrading in such systems, it is challenging to formalize the security policy as an extensional property of the system.This paper presents a generalized framework of downgrading policies. Such policies can be specified in a simple and tractable language and can be statically enforced by mechanisms such as type systems. The security guarantee is then formalized as a concise extensional property using program equivalences. This relaxed noninterference generalizes traditional pure noninterference and precisely characterizes the information released due to downgrading.},
booktitle = {Proceedings of the 32nd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
pages = {158-170},
numpages = {13},
keywords = {language-based security, program equivalence, downgrading policies, information flow, relaxed noninterference},
location = {Long Beach, California, USA},
series = {POPL '05}
}

@article{10.1145/1047659.1040319,
author = {Li, Peng and Zdancewic, Steve},
title = {Downgrading Policies and Relaxed Noninterference},
year = {2005},
issue_date = {January 2005},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {40},
number = {1},
issn = {0362-1340},
url = {https://doi.org/10.1145/1047659.1040319},
doi = {10.1145/1047659.1040319},
abstract = {In traditional information-flow type systems, the security policy is often formalized as noninterference properties. However, noninterference alone is too strong to express security properties useful in practice. If we allow downgrading in such systems, it is challenging to formalize the security policy as an extensional property of the system.This paper presents a generalized framework of downgrading policies. Such policies can be specified in a simple and tractable language and can be statically enforced by mechanisms such as type systems. The security guarantee is then formalized as a concise extensional property using program equivalences. This relaxed noninterference generalizes traditional pure noninterference and precisely characterizes the information released due to downgrading.},
journal = {SIGPLAN Not.},
month = {jan},
pages = {158–170},
numpages = {13},
keywords = {language-based security, information flow, relaxed noninterference, program equivalence, downgrading policies}
}

%%%%%%%%%%%%%%%%%%%

@inproceedings{wysstar,
  author    = {Aseem Rastogi and
               Nikhil Swamy and
               Michael Hicks},
  editor    = {Flemming Nielson and
               David Sands},
  title     = {Wys*: {A} {DSL} for Verified Secure Multi-party Computations},
  booktitle = {8th International Conference on Principles of Security and Trust (POST)},
  shortbooktitle = {POST},
  series    = {Lecture Notes in Computer Science},
  volume    = {11426},
  pages     = {99--122},
  publisher = {Springer},
  year      = {2019},
  url       = {https://doi.org/10.1007/978-3-030-17138-4\_5},
  doi       = {10.1007/978-3-030-17138-4\_5},
  biburl    = {https://dblp.org/rec/bib/conf/post/RastogiSH19},
}

%%%%%%%%%%%%%%%%

@INPROCEEDINGS{rastogi14wysteria,
  AUTHOR = {Aseem Rastogi and Matthew A. Hammer and Michael Hicks},
  TITLE = {Knowledge Inference for Optimizing Secure Multi-party Computation},
  BOOKTITLE = {In Proceedings of the 35th IEEE Symposium on Security and Privacy (Oakland) 2014},
  MONTH = MAY,
  YEAR = 2014
}

%%%%%%%%%%%%%%%%


@article{10.1145/3498713,
author = {Ye, Qianchuan and Delaware, Benjamin},
title = {Oblivious Algebraic Data Types},
year = {2022},
issue_date = {January 2022},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {6},
number = {POPL},
url = {https://doi.org/10.1145/3498713},
doi = {10.1145/3498713},
abstract = {Secure computation allows multiple parties to compute joint functions over private data without leaking any sensitive data, typically using powerful cryptographic techniques. Writing secure applications using these techniques directly can be challenging, resulting in the development of several programming languages and compilers that aim to make secure computation accessible. Unfortunately, many of these languages either lack or have limited support for rich recursive data structures, like trees. In this paper, we propose a novel representation of structured data types, which we call oblivious algebraic data types, and a language for writing secure computations using them. This language combines dependent types with constructs for oblivious computation, and provides a security-type system which ensures that adversaries can learn nothing more than the result of a computation. Using this language, authors can write a single function over private data, and then easily build an equivalent secure computation according to a desired public view of their data.},
journal = {Proc. ACM Program. Lang.},
month = {jan},
articleno = {51},
numpages = {29},
keywords = {Algebraic Data Types, Oblivious Computation, Multiparty Computation, Dependent Types}
}

%%%%%%%%%%%%%%%%

@INPROCEEDINGS {8429300,
author = {H. Haagh and A. Karbyshev and S. Oechsner and B. Spitters and P. Strub},
booktitle = {2018 IEEE 31st Computer Security Foundations Symposium (CSF)},
title = {Computer-Aided Proofs for Multiparty Computation with Active Security},
year = {2018},
volume = {},
issn = {2374-8303},
pages = {119-131},
abstract = {Secure multi-party computation (MPC) is a general cryptographic technique that allows distrusting parties to compute a function of their individual inputs, while only revealing the output of the function. It has found applications in areas such as auctioning, email filtering, and secure teleconference. Given their importance, it is crucial that the protocols are specified and implemented correctly. In the programming language community, it has become good practice to use computer proof assistants to verify correctness proofs. In the field of cryptography, EasyCrypt is the state of the art proof assistant. It provides an embedded language for probabilistic programming, together with a specialized logic, embedded into an ambient general purpose higher-order logic. It allows us to conveniently express cryptographic properties. EasyCrypt has been used successfully on many applications, including public-key encryption, signatures, garbled circuits and differential privacy. Here we show for the first time that it can also be used to prove security of MPC against a malicious adversary. We formalize additive and replicated secret sharing schemes and apply them to Maurer&#x27;s MPC protocol for secure addition and multiplication. Our method extends to general polynomial functions. We follow the insights from EasyCrypt that security proofs can often be reduced to proofs about program equivalence, a topic that is well understood in the verification of programming languages. In particular, we show that for a class of MPC protocols in the passive case the non-interference-based (NI) definition is equivalent to a standard simulation-based security definition. For the active case, we provide a new non-interference based alternative to the usual simulation-based cryptographic definition that is tailored specifically to our protocol.},
keywords = {cryptography;protocols;additives;probabilistic logic;standards;tools},
doi = {10.1109/CSF.2018.00016},
url = {https://doi.ieeecomputersociety.org/10.1109/CSF.2018.00016},
publisher = {IEEE Computer Society},
address = {Los Alamitos, CA, USA},
month = {jul}
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%

@INPROCEEDINGS{4223226,
  author={Askarov, Aslan and Sabelfeld, Andrei},
  booktitle={2007 IEEE Symposium on Security and Privacy (SP '07)}, 
  title={Gradual Release: Unifying Declassification, Encryption and Key Release Policies}, 
  year={2007},
  volume={},
  number={},
  pages={207-221},
  doi={10.1109/SP.2007.22}}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%


@inproceedings{li2021privacy,
  title={Privacy-preserving feature selection with secure multiparty computation},
  author={Li, Xiling and Dowsley, Rafael and De Cock, Martine},
  booktitle={International Conference on Machine Learning},
  pages={6326--6336},
  year={2021},
  organization={PMLR}
}


%%%%%%%%%%%%%%%%%%%%%%%%%%%

@article{knott2021crypten,
  title={Crypten: Secure multi-party computation meets machine learning},
  author={Knott, Brian and Venkataraman, Shobha and Hannun, Awni and Sengupta, Shubho and Ibrahim, Mark and van der Maaten, Laurens},
  journal={Advances in Neural Information Processing Systems},
  volume={34},
  pages={4961--4973},
  year={2021}
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%

@incollection{koch2020privacy,
  title={Privacy-preserving analytics for data markets using MPC},
  author={Koch, Karl and Krenn, Stephan and Pellegrino, Donato and Ramacher, Sebastian},
  booktitle={IFIP International Summer School on Privacy and Identity Management},
  pages={226--246},
  year={2020},
  publisher={Springer}
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%

@article{liu2020privacy,
  title={Privacy preserving distributed data mining based on secure multi-party computation},
  author={Liu, Jun and Tian, Yuan and Zhou, Yu and Xiao, Yang and Ansari, Nirwan},
  journal={Computer Communications},
  volume={153},
  pages={208--216},
  year={2020},
  publisher={Elsevier}
}


%%%%%%%%%%%%%%%%%%%%%%%%%%%

@inproceedings{sayyad2020privacy,
  title={Privacy preserving deep learning using secure multiparty computation},
  author={Sayyad, Suhel},
  booktitle={2020 Second International Conference on Inventive Research in Computing Applications (ICIRCA)},
  pages={139--142},
  year={2020},
  organization={IEEE}
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@inproceedings{lu2019honeybadgermpc,
  title={Honeybadgermpc and asynchromix: Practical asynchronous mpc and its application to anonymous communication},
  author={Lu, Donghang and Yurek, Thomas and Kulshreshtha, Samarth and Govind, Rahul and Kate, Aniket and Miller, Andrew},
  booktitle={Proceedings of the 2019 ACM SIGSAC Conference on Computer and Communications Security},
  pages={887--903},
  year={2019}
}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@article{ishai2009zero,
  title={Zero-knowledge proofs from secure multiparty computation},
  author={Ishai, Yuval and Kushilevitz, Eyal and Ostrovsky, Rafail and Sahai, Amit},
  journal={SIAM Journal on Computing},
  volume={39},
  number={3},
  pages={1121--1152},
  year={2009},
  publisher={SIAM}
}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@article{yang2020zero,
  title={A zero-knowledge-proof-based digital identity management scheme in blockchain},
  author={Yang, Xiaohui and Li, Wenjie},
  journal={Computers \& Security},
  volume={99},
  pages={102050},
  year={2020},
  publisher={Elsevier}
}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@article{gao2022symmeproof,
  title={SymmeProof: Compact zero-knowledge argument for blockchain confidential transactions},
  author={Gao, Shang and Peng, Zhe and Tan, Feng and Zheng, Yuanqing and Xiao, Bin},
  journal={IEEE Transactions on Dependable and Secure Computing},
  year={2022},
  publisher={IEEE}
}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@article{tomaz2020preserving,
  title={Preserving privacy in mobile health systems using non-interactive zero-knowledge proof and blockchain},
  author={Tomaz, Antonio Emerson Barros and Do Nascimento, Jose Claudio and Hafid, Abdelhakim Senhaji and De Souza, Jose Neuman},
  journal={IEEE access},
  volume={8},
  pages={204441--204458},
  year={2020},
  publisher={IEEE}
}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@inproceedings{sahai2020enabling,
  title={Enabling privacy and traceability in supply chains using blockchain and zero knowledge proofs},
  author={Sahai, Shubham and Singh, Nitin and Dayama, Pankaj},
  booktitle={2020 IEEE International Conference on Blockchain (Blockchain)},
  pages={134--143},
  year={2020},
  organization={IEEE}
}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@inproceedings{hicks2006trusted,
  title={Trusted declassification: High-level policy for a security-typed language},
  author={Hicks, Boniface and King, Dave and McDaniel, Patrick and Hicks, Michael},
  booktitle={Proceedings of the 2006 workshop on Programming languages and analysis for security},
  pages={65--74},
  year={2006}
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% https://www.cs.ucdavis.edu/~rogaway/papers/equiv.pdf

@InProceedings{10.1007/3-540-44929-9_1,
author="Abadi, Martin and Rogaway, Phillip",
editor="van Leeuwen, Jan
and Watanabe, Osamu
and Hagiya, Masami
and Mosses, Peter D.
and Ito, Takayasu",
title="Reconciling Two Views of Cryptography",
booktitle="Theoretical Computer Science: Exploring New Frontiers of Theoretical Informatics",
year="2000",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="3--22",
abstract="Two distinct, rigorous views of cryptography have developed over the years, in two mostly separate communities. One of the views relies on a simple but effective formal approach; the other, on a detailed computational model that considers issues of complexity and probability. There is an uncomfortable and interesting gap between these two approaches to cryptography. This paper starts to bridge the gap, by providing a computational justification for a formal treatment of encryption.",
isbn="978-3-540-44929-4"
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% https://theory.stanford.edu/people/jcm/papers/ppc-2004-long.pdf

@article{MITCHELL2006118,
title = {A probabilistic polynomial-time process calculus for the analysis of cryptographic protocols},
journal = {Theoretical Computer Science},
volume = {353},
number = {1},
pages = {118-164},
year = {2006},
issn = {0304-3975},
doi = {https://doi.org/10.1016/j.tcs.2005.10.044},
url = {https://www.sciencedirect.com/science/article/pii/S030439750500770X},
author = {John C. Mitchell and Ajith Ramanathan and Andre Scedrov and Vanessa Teague},
keywords = {Process Algebra, Observational equivalence, Probabilistic bisimulation, Security protocol analysis},
abstract = {We prove properties of a process calculus that is designed for analysing security protocols. Our long-term goal is to develop a form of protocol analysis, consistent with standard cryptographic assumptions, that provides a language for expressing probabilistic polynomial-time protocol steps, a specification method based on a compositional form of equivalence, and a logical basis for reasoning about equivalence. The process calculus is a variant of CCS, with bounded replication and probabilistic polynomial-time expressions allowed in messages and boolean tests. To avoid inconsistency between security and nondeterminism, messages are scheduled probabilistically instead of nondeterministically. We prove that evaluation of any process expression halts in probabilistic polynomial time and define a form of asymptotic protocol equivalence that allows security properties to be expressed using observational equivalence, a standard relation from programming language theory that involves quantifying over all possible environments that might interact with the protocol. We develop a form of probabilistic bisimulation and use it to establish the soundness of an equational proof system based on observational equivalences. The proof system is illustrated by a formation derivation of the assertion, well-known in cryptography, that El Gamal encryption's semantic security is equivalent to the (computational) Decision Diffie–Hellman assumption. This example demonstrates the power of probabilistic bisimulation and equational reasoning for protocol security.}
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% https://citeseerx.ist.psu.edu/viewdoc/download;jsessionid=FB6C44FEEE76BD347DB37CA1B83401E9?doi=10.1.1.60.3688&rep=rep1&type=pdf

@article{sabelfeld2009declassification,
author = {Sabelfeld, Andrei and Sands, David},
title = {Declassification: Dimensions and Principles},
year = {2009},
issue_date = {October 2009},
publisher = {IOS Press},
address = {NLD},
volume = {17},
number = {5},
issn = {0926-227X},
abstract = {Computing systems often deliberately release (or declassify) sensitive information. A principal security concern for systems permitting information release is whether this release is safe: is it possible that the attacker compromises the information release mechanism and extracts more secret information than intended? While the security community has recognised the importance of the problem, the state-of-the-art in information release is, unfortunately, a number of approaches with somewhat unconnected semantic goals. We provide a road map of the main directions of current research, by classifying the basic goals according to what information is released, who releases information, where in the system information is released and when information can be released. With a general declassification framework as a long-term goal, we identify some prudent principles of declassification. These principles shed light on existing definitions and may also serve as useful “sanity checks” for emerging models.},
journal = {J. Comput. Secur.},
month = {oct},
pages = {517-548},
numpages = {32},
keywords = {declassification, Information flow}
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% https://dl.acm.org/doi/pdf/10.1145/3453483.3454074

@inproceedings{10.1145/3453483.3454074,
author = {Acay, Co\c{s}ku and Recto, Rolph and Gancher, Joshua and Myers, Andrew C. and Shi, Elaine},
title = {Viaduct: An Extensible, Optimizing Compiler for Secure Distributed Programs},
year = {2021},
isbn = {9781450383912},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3453483.3454074},
doi = {10.1145/3453483.3454074},
abstract = {Modern distributed systems involve interactions between principals with limited trust, so cryptographic mechanisms are needed to protect confidentiality and integrity. At the same time, most developers lack the training to securely employ cryptography. We present Viaduct, a compiler that transforms high-level programs into secure, efficient distributed realizations. Viaduct's source language allows developers to declaratively specify security policies by annotating their programs with information flow labels. The compiler uses these labels to synthesize distributed programs that use cryptography efficiently while still defending the source-level security policy. The Viaduct approach is general, and can be easily extended with new security mechanisms. Our implementation of the Viaduct compiler comes with an extensible runtime system that includes plug-in support for multiparty computation, commitments, and zero-knowledge proofs. We have evaluated the system on a set of benchmarks, and the results indicate that our approach is feasible and can use cryptography in efficient, nontrivial ways.},
booktitle = {Proceedings of the 42nd ACM SIGPLAN International Conference on Programming Language Design and Implementation},
pages = {740-755},
numpages = {16},
keywords = {multiparty computation, information flow, zero knowledge},
location = {Virtual, Canada},
series = {PLDI 2021}
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% https://www.cs.cornell.edu/andru/papers/csfw01.pdf

@INPROCEEDINGS{930133,
  author={Zdancewic, S. and Myers, A.C.},
  booktitle={Proceedings. 14th IEEE Computer Security Foundations Workshop, 2001.}, 
  title={Robust declassification}, 
  year={2001},
  volume={},
  number={},
  pages={15-23},
  doi={10.1109/CSFW.2001.930133}}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@inproceedings{10.1145/3133956.3134054,
author = {Cecchetti, Ethan and Myers, Andrew C. and Arden, Owen},
title = {Nonmalleable Information Flow Control},
year = {2017},
isbn = {9781450349468},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3133956.3134054},
doi = {10.1145/3133956.3134054},
abstract = {Noninterference is a popular semantic security condition because it offers strong end-to-end guarantees, it is inherently compositional, and it can be enforced using a simple security type system. Unfortunately, it is too restrictive for real systems. Mechanisms for downgrading information are needed to capture real-world security requirements, but downgrading eliminates the strong compositional security guarantees of noninterference.We introduce nonmalleable information flow, a new formal security condition that generalizes noninterference to permit controlled downgrading of both confidentiality and integrity. While previous work on robust declassification prevents adversaries from exploiting the downgrading of confidentiality, our key insight is transparent endorsement, a mechanism for downgrading integrity while defending against adversarial exploitation. Robust declassification appeared to break the duality of confidentiality and integrity by making confidentiality depend on integrity, but transparent endorsement makes integrity depend on confidentiality, restoring this duality. We show how to extend a security-typed programming language with transparent endorsement and prove that this static type system enforces nonmalleable information flow, a new security property that subsumes robust declassification and transparent endorsement. Finally, we describe an implementation of this type system in the context of Flame, a flow-limited authorization plugin for the Glasgow Haskell Compiler.},
booktitle = {Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security},
pages = {1875-1891},
numpages = {17},
keywords = {information security, information flow control, downgrading, security types},
location = {Dallas, Texas, USA},
series = {CCS '17}
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@Misc{jpdf-github,
  title = 	 {URL redacted for double-blind review.}}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% https://research.vu.nl/en/publications/a-state-separating-proof-for-yaos-garbling-scheme

@inproceedings{5a51987acaa84c43bb4bf5bcc7d01683,
title = "A State-Separating Proof for Yao's Garbling Scheme",
abstract = "Secure multiparty computation enables mutually distrusting parties to compute a public function of their secret inputs. One of the main approaches for designing MPC protocols are garbled circuits whose core component is usually referred to as a garbling scheme. In this work, we revisit the security of Yao's garbling scheme and provide a modular security proof which composes the security of multiple layer garblings to prove security of the full circuit garbling. We perform our security proof in the style of state-separating proofs (ASIACRYPT 2018).",
author = "Chris Brzuska and Sabine Oechsner",
year = "2023",
doi = "10.1109/CSF57540.2023.00009",
language = "English",
series = "Proceedings - IEEE Computer Security Foundations Symposium",
publisher = "IEEE Computer Society",
pages = "137--152",
booktitle = "Proceedings - 2023 IEEE 36th Computer Security Foundations Symposium, CSF 2023",
note = "36th IEEE Computer Security Foundations Symposium, CSF 2023 ; Conference date: 09-07-2023 Through 13-07-2023",
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@INPROCEEDINGS {viaduct-UC,
author = {C. Acay and J. Gancher and R. Recto and A. Myers},
booktitle = {2024 IEEE 37th Computer Security Foundations Symposium (CSF)},
title = {Secure Synthesis of Distributed Cryptographic Applications},
year = {2024},
volume = {},
issn = {2374-8303},
pages = {315-330},
abstract = {Developing secure distributed systems is difficult, and even harder when advanced cryptography must be used to achieve security goals. Following prior work, we advocate using secure program partitioning to synthesize cryptographic applications: instead of implementing a system of communicating processes, the programmer implements a centralized, sequential program, which is automatically compiled into a secure distributed version that uses cryptography. While this approach is promising, formal results for the security of such compilers are limited in scope. In particular, no security proof yet simultaneously addresses subtleties essential for robust, efficient applications: multiple cryptographic mechanisms, malicious corruption, and asynchronous communication. In this work, we develop a compiler security proof that handles these subtleties. Our proof relies on a novel unification of simulation-based security, information-flow control, choreographic programming, and sequentialization techniques for concurrent programs. While our proof targets hybrid protocols, which abstract cryptographic mechanisms as idealized functionalities, our approach offers a clear path toward leveraging Universal Composability to obtain end-to-end, modular security results with fully instantiated cryptographic mechanisms. Finally, following prior observations about simulation-based security, we prove that our result guarantees robust hyperproperty preservation, an important criterion for compiler correctness that preserves all source-level security properties in target programs.},
keywords = {},
doi = {10.1109/CSF61375.2024.00021},
url = {https://doi.ieeecomputersociety.org/10.1109/CSF61375.2024.00021},
publisher = {IEEE Computer Society},
address = {Los Alamitos, CA, USA},
month = {jul}
}

@InProceedings{10.1007/978-3-030-68869-1_3,
author="Orsini, Emmanuela",
editor="Bajard, Jean Claude
and Topuzo{\u{g}}lu, Alev",
title="Efficient, Actively Secure MPC with a Dishonest Majority: A Survey",
booktitle="Arithmetic of Finite Fields",
year="2021",
publisher="Springer International Publishing",
address="Cham",
pages="42--71",
abstract="The last ten years have seen a tremendous growth in the interest and practicality of secure multiparty computation (MPC) and its possible applications. Secure MPC is indeed a very hot research topic and recent advances in the field have already been translated into commercial products world-wide. A major pillar in this advance has been in the case of active security with a dishonest majority, mainly due to the SPDZ-line of work protocols. This survey gives an overview of these protocols, with a focus of the original SPDZ paper (Damg{\aa}rd et al. CRYPTO 2012) and its subsequent optimizations.",
isbn="978-3-030-68869-1"
}

@article{10.1145/3571740,
author = {Hunt, Sebastian and Sands, David and Stucki, Sandro},
title = {Reconciling Shannon and Scott with a Lattice of Computable Information},
year = {2023},
issue_date = {January 2023},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {7},
number = {POPL},
url = {https://doi.org/10.1145/3571740},
doi = {10.1145/3571740},
abstract = {This paper proposes a reconciliation of two different theories of information. The first, originally proposed in a lesser-known work by Claude Shannon (some five years after the publication of his celebrated quantitative theory of communication), describes how the information content of channels can be described qualitatively, but still abstractly, in terms of information elements, where information elements can be viewed as equivalence relations over the data source domain. Shannon showed that these elements have a partial ordering, expressing when one information element is more informative than another, and that these partially ordered information elements form a complete lattice. In the context of security and information flow this structure has been independently rediscovered several times, and used as a foundation for understanding and reasoning about information flow. The second theory of information is Dana Scott’s domain theory, a mathematical framework for giving meaning to programs as continuous functions over a particular topology. Scott’s partial ordering also represents when one element is more informative than another, but in the sense of computational progress – i.e. when one element is a more defined or evolved version of another. To give a satisfactory account of information flow in computer programs it is necessary to consider both theories together, in order to understand not only what information is conveyed by a program (viewed as a channel, \`{a} la Shannon) but also how the precision with which that information can be observed is determined by the definedness of its encoding (\`{a} la Scott). To this end we show how these theories can be fruitfully combined, by defining the Lattice of Computable Information (LoCI), a lattice of preorders rather than equivalence relations. LoCI retains the rich lattice structure of Shannon’s theory, filters out elements that do not make computational sense, and refines the remaining information elements to reflect how Scott’s ordering captures possible varieties in the way that information is presented. We show how the new theory facilitates the first general definition of termination-insensitive information flow properties, a weakened form of information flow property commonly targeted by static program analyses.},
journal = {Proc. ACM Program. Lang.},
month = {jan},
articleno = {68},
numpages = {30},
keywords = {Information Flow, Semantics}
}


@InProceedings{SPDZ2,
author="Damg{\aa}rd, Ivan
and Pastro, Valerio
and Smart, Nigel
and Zakarias, Sarah",
editor="Safavi-Naini, Reihaneh
and Canetti, Ran",
title="Multiparty Computation from Somewhat Homomorphic Encryption",
booktitle="Advances in Cryptology -- CRYPTO 2012",
year="2012",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="643--662",
abstract="We propose a general multiparty computation protocol secure against an active adversary corrupting up to {\$}{\$}n-1{\$}{\$}of the n players. The protocol may be used to compute securely arithmetic circuits over any finite field {\$}{\$}{\backslash}mathbb {\{}F{\}}{\_}{\{}p^k{\}}{\$}{\$}. Our protocol consists of a preprocessing phase that is both independent of the function to be computed and of the inputs, and a much more efficient online phase where the actual computation takes place. The online phase is unconditionally secure and has total computational (and communication) complexity linear in n, the number of players, where earlier work was quadratic in n. Moreover, the work done by each player is only a small constant factor larger than what one would need to compute the circuit in the clear. We show this is optimal for computation in large fields. In practice, for 3 players, a secure 64-bit multiplication can be done in 0.05 ms. Our preprocessing is based on a somewhat homomorphic cryptosystem. We extend a scheme by Brakerski et al., so that we can perform distributed decryption and handle many values in parallel in one ciphertext. The computational complexity of our preprocessing phase is dominated by the public-key operations, we need {\$}{\$}O(n^2/s){\$}{\$}operations per secure multiplication where s is a parameter that increases with the security parameter of the cryptosystem. Earlier work in this model needed {\$}{\$}{\backslash}varOmega (n^2){\$}{\$}operations. In practice, the preprocessing prepares a secure 64-bit multiplication for 3 players in about 13 ms.",
isbn="978-3-642-32009-5"
}

@InProceedings{SPDZ1,
author="Damg{\aa}rd, Ivan
and Orlandi, Claudio",
editor="Rabin, Tal",
title="Multiparty Computation for Dishonest Majority: From Passive to Active Security at Low Cost",
booktitle="Advances in Cryptology -- CRYPTO 2010",
year="2010",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="558--576",
abstract="Multiparty computation protocols have been known for more than twenty years now, but due to their lack of efficiency their use is still limited in real-world applications: the goal of this paper is the design of efficient two and multi party computation protocols aimed to fill the gap between theory and practice. We propose a new protocol to securely evaluate reactive arithmetic circuits, that offers security against an active adversary in the universally composable security framework. Instead of the ``do-and-compile'' approach (where the parties use zero-knowledge proofs to show that they are following the protocol) our key ingredient is an efficient version of the ``cut-and-choose'' technique, that allow us to achieve active security for just a (small) constant amount of work more than for passive security.",
isbn="978-3-642-14623-7"
}

@InProceedings{BDOZ,
author="Bendlin, Rikke
and Damg{\aa}rd, Ivan
and Orlandi, Claudio
and Zakarias, Sarah",
editor="Paterson, Kenneth G.",
title="Semi-homomorphic Encryption and Multiparty Computation",
booktitle="Advances in Cryptology -- EUROCRYPT 2011",
year="2011",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="169--188",
abstract="An additively-homomorphic encryption scheme enables us to compute linear functions of an encrypted input by manipulating only the ciphertexts. We define the relaxed notion of a semi-homomorphic encryption scheme, where the plaintext can be recovered as long as the computed function does not increase the size of the input ``too much''. We show that a number of existing cryptosystems are captured by our relaxed notion. In particular, we give examples of semi-homomorphic encryption schemes based on lattices, subset sum and factoring. We then demonstrate how semi-homomorphic encryption schemes allow us to construct an efficient multiparty computation protocol for arithmetic circuits, UC-secure against a dishonest majority. The protocol consists of a preprocessing phase and an online phase. Neither the inputs nor the function to be computed have to be known during preprocessing. Moreover, the online phase is extremely efficient as it requires no cryptographic operations: the parties only need to exchange additive shares and verify information theoretic MACs. Our contribution is therefore twofold: from a theoretical point of view, we can base multiparty computation on a variety of different assumptions, while on the practical side we offer a protocol with better efficiency than any previous solution.",
isbn="978-3-642-20465-4"
}

@InProceedings{SMFF,
author="Ozdemir, Alex
and Kremer, Gereon
and Tinelli, Cesare
and Barrett, Clark",
editor="Enea, Constantin
and Lal, Akash",
title="Satisfiability Modulo Finite Fields",
booktitle="Computer Aided Verification",
year="2023",
publisher="Springer Nature Switzerland",
address="Cham",
pages="163--186",
abstract="We study satisfiability modulo the theory of finite fields and give a decision procedure for this theory. We implement our procedure for prime fields inside the cvc5 SMT solver. Using this theory, we construct SMT queries that encode translation validation for various zero knowledge proof compilers applied to Boolean computations. We evaluate our procedure on these benchmarks. Our experiments show that our implementation is superior to previous approaches (which encode field arithmetic using integers or bit-vectors).",
isbn="978-3-031-37703-7"
}

@inproceedings{skalka-near-ppdp24,
  title = {Language-Based Security for Low-Level MPC},
  author = {Christian Skalka and Joseph P. Near},
  year = {2024},
  booktitle = {Proceedings of the ACM Conference on Principles and Practice of Declarative Programming},
  abstract = {Secure Multi-Party Computation (MPC) is an important enabling technology for data privacy in modern distributed applications. Currently, proof methods for low-level MPC protocols are primarily manual and thus tedious and error-prone, and are also non-standardized and unfamiliar to most PL theorists. As a step towards better language support and language-based enforcement, we develop a new staged PL for defining a variety of low-level probabilistic MPC protocols. We also formulate a collection of confidentiality and integrity hyperproperties for our language model that are familiar from information flow, including conditional noninterference, gradual release, and robust declassification. We demonstrate their relation to standard MPC threat models of passive and malicious security, and how they can be leveraged in security verification of protocols. To prove these properties we develop automated tactics in $\mathbb{F}_2$ that can be integrated with separation logic-style reasoning.},
  pdf = {https://arxiv.org/abs/2407.16504}
}