exprfunctions:

SHARED(x) { (m[x++"s"]@1 + m[x++"s"]@2) }

cmdfunctions:

_open(x:string, i1:cid, i2:cid){
    m[x++"exts"]@i1 := m[x++"s"]@i2;
    m[x++"extm"]@i1 := m[x++"m"]@i2;
    assert(m[x++"extm"] = -m[x++"k"] + (m["delta"] * m[x++"exts"]))@i1;
    m[x]@i1 := (m[x++"exts"] + m[x++"s"])@i1
}

open(x:string) { _open(x,1,2); _open(x,2,1) }

_sum(z:string, x:string, y:string, i:cid) { 
    m[z++"s"]@i := (m[x++"s"] + m[y++"s"])@i;
    m[z++"m"]@i := (m[x++"m"] + m[y++"m"])@i;
    m[z++"k"]@i := (m[x++"k"] + m[y++"k"])@i
}

precondition: ( MACed(x) AND MACed(y) )
sum(z:string, x:string, y:string){ _sum(z,x,y,1); _sum(z,x,y,2) }
postcondition: ( MACed(z) AND SHARED(z) == SHARED(x) + SHARED(y) )

_mult(z : string, y : string, i : cid) {
    m[z++"s"]@i := (m[z++"d"] * m[y++"s"] + -m[z++"e"] * m[z++"as"] + m[z++"cs"])@i;
    m[z++"m"]@i := (m[z++"d"] * m[y++"m"] + -m[z++"e"] * m[z++"am"] + m[z++"cm"])@i;
    m[z++"k"]@i := (m[z++"d"] * m[y++"k"] + -m[z++"e"] * m[z++"ak"] + m[z++"ck"])@i
}

precondition: ( MACed(x) AND MACed(y) AND
                MACed(z++"a") AND MACed(z++"b") AND MACed(z++"c") AND
		BEAVERTRIP(z) )
mult(z : string, x : string, y : string) {
    sum(z++"d", x, z++"a");
    open(z++"d");
    sum(z++"e", y, z++"b");
    open(z++"e");
    _mult(z,y,1); _mult(z,y,2)
}
postcondition: ( MACed(z) AND SHARED(z) == SHARED(x) * SHARED(y) )

// *
// main entry point
// * 
precondition: ( MACed("x") AND MACed("y") AND
	        MACed("i") AND MACed("j") AND
 	        MACed("ka") AND MACed("kb") AND MACed("kc") AND
		BEAVERTRIP("k") ) 
main() {
    sum("z","x","y");
    mult("k","i","j");
    sum("out","z","k");
    open("out")
}
postcondition: ( m["out"]@1 == (SHARED("x") + SHARED("y")) + (SHARED("i") * SHARED("j")) )

constraintfunctions:

// BDOZ MAC predicate
MACOK(x, i1, i2) { m[x++"m"]@i2 == -m[x++"k"]@i1 + (m["delta"]@i1 * m[x++"s"]@i2) }

MACed(x) { MACOK(x, 1, 2) AND MACOK(x, 2, 1) }

// These are Beaver triple constraints. Party 3 is a phantom just for spec.
BEAVERTRIP(x) {
  m[x++"c"]@3 == m[x++"a"]@3 * m[x++"b"]@3 AND
  m[x++"as"]@1 + m[x++"as"]@2 == m[x++"a"]@3 AND
  m[x++"bs"]@1 + m[x++"bs"]@2 == m[x++"b"]@3 AND
  m[x++"cs"]@1 + m[x++"cs"]@2 == m[x++"c"]@3 
}

