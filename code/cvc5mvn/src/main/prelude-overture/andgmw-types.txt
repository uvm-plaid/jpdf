exprfunctions:

not(x){ x + 1 }

SHARED(x) { (m[x]@1 + m[x]@2) }

andtablegmw(x, y, z) {
  let r11 = (r[z] + (m[x] + 1) * (m[y] + 1)) in
  let r10 = (r[z] + (m[x] + 1) * (m[y] + 0)) in
  let r01 = (r[z] + (m[x] + 0) * (m[y] + 1)) in
  let r00 = (r[z] + (m[x] + 0) * (m[y] + 0)) in
  { row1 = r11; row2 = r10; row3 = r01; row4 = r00 }
}

cmdfunctions:

andgmw(z:string, x:string, y:string) {
  let table = andtablegmw(x,y,z) in
  m[z]@2 := OT4((m[x], m[y])@2, table.row4, table.row3, table.row2, table.row1)@1;
  m[z]@1 := r[z]@1
}
postcondition:
  ({r[z]@1},
   [m[z]@1,m[z]@2] as [r[z]@1, (SHARED(x) * SHARED(y)) + r[z]@1] : shares),
  ( SHARED(z) == SHARED(x) * SHARED(y))

main(){ andgmw("g1","x","y") }
postcondition: ( SHARED("g1") == SHARED("x") * SHARED("y"))
