cmdfunctions:

_open(x,i1,i2){
    m[x++"exts"]@i1 := m[x++"s"]@i2;
    m[x++"extm"]@i1 := m[x++"m"]@i2;
    m[x]@i1 := (m[x++"exts"] + m[x++"s"])@i1
}

open(x) { _open(x,1,2); _open(x,2,1) }

_sum(z, x, y, i){
    m[z++"s"]@i := (m[x++"s"] + m[y++"s"])@i;
    m[z++"m"]@i := (m[x++"m"] + m[y++"m"])@i;
    m[z++"k"]@i := (m[x++"k"] + m[y++"k"])@i
}

sum(z,x,y){ _sum(z,x,y,1); _sum(z,x,y,2) }

// This clearly illustrates SHE properties of BDOZ MAC.
_mult(z, x, y, i) {
    m[z++"s"]@i := (m[z++"d"] * m[y++"s"] + -m[z++"e"] * m[z++"as"] + m[z++"cs"])@i;
    m[z++"m"]@i := (m[z++"d"] * m[y++"m"] + -m[z++"e"] * m[z++"am"] + m[z++"cm"])@i;
    m[z++"k"]@i := (m[z++"d"] * m[y++"k"] + -m[z++"e"] * m[z++"ak"] + m[z++"ck"])@i
}

mult(z,x,y) {
    sum(z++"d", x, z++"a");
    open(z++"d");
    sum(z++"e", y, z++"b");
    open(z++"e"); 
    _mult(z,x,y,1); _mult(z,x,y,2)
}

main(){
    sum("z","x","y");
    open("z");

    mult("k","i","j");
    open("k")
}

precondition: (
// These are Beaver triple constraints. Party 3 is a phantom just for spec.
m["kc"]@3 == m["ka"]@3 * m["kb"]@3 AND
m["kas"]@1 + m["kas"]@2 == m["ka"]@3 AND
m["kbs"]@1 + m["kbs"]@2 == m["kb"]@3 AND
m["kcs"]@1 + m["kcs"]@2 == m["kc"]@3 AND

// These are BDOZ MAC constraints for party 1 verification of party 2.
m["kam"]@2 == m["kak"]@1 + (m["delta"]@1 * m["kas"]@2) AND
m["kbm"]@2 == m["kbk"]@1 + (m["delta"]@1 * m["kbs"]@2) AND
m["kcm"]@2 == m["kck"]@1 + (m["delta"]@1 * m["kcs"]@2) AND
m["xm"]@2 == m["xk"]@1 + (m["delta"]@1 * m["xs"]@2) AND
m["ym"]@2 == m["yk"]@1 + (m["delta"]@1 * m["ys"]@2) AND
m["im"]@2 == m["ik"]@1 + (m["delta"]@1 * m["is"]@2) AND
m["jm"]@2 == m["jk"]@1 + (m["delta"]@1 * m["js"]@2)

// These are BDOZ MAC constraints for party 2 verification of party 1.
m["kam"]@1 == m["kak"]@2 + (m["delta"]@2 * m["kas"]@1) AND
m["kbm"]@1 == m["kbk"]@2 + (m["delta"]@2 * m["kbs"]@1) AND
m["kcm"]@1 == m["kck"]@2 + (m["delta"]@2 * m["kcs"]@1) AND
m["xm"]@1 == m["xk"]@2 + (m["delta"]@2 * m["xs"]@1) AND
m["ym"]@1 == m["yk"]@2 + (m["delta"]@2 * m["ys"]@1) AND
m["im"]@1 == m["ik"]@2 + (m["delta"]@2 * m["is"]@1) AND
m["jm"]@1 == m["jk"]@2 + (m["delta"]@2 * m["js"]@1) 
)

postcondition: (
// Correctness of sum
m["z"]@1 == ((m["xs"]@1 + m["xs"]@2) + (m["ys"]@1 + m["ys"]@2)) AND

// Correctness of mult
m["k"]@1 == ((m["is"]@1 + m["is"]@2) * (m["js"]@1 + m["js"]@2)) AND

// party 1 verifications for secure openings of z and k
m["zextm"]@1 == (m["zk"]@1 + m["delta"]@1 * m["zexts"]@1) AND
m["kextm"]@1 == (m["kk"]@1 + m["delta"]@1 * m["kexts"]@1)

// Party 2 verifications for secure openings of z and k
m["zextm"]@1 == (m["zk"]@1 + m["delta"]@1 * m["zexts"]@1) AND
m["kextm"]@1 == (m["kk"]@1 + m["delta"]@1 * m["kexts"]@1)
)
