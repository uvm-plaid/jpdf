exprfunctions:

not(x){ (x + 1) }

mux(s1, b1, b2){ (not(s1) * b1) + (s1 * b2) }

permute(s, b1, b2){
  let v1 = mux(s,b1,b2) in
  let v2 = mux(not(s), b1, b2) in
  {v1 = v1; v2 = v2}
}

mux4(s1, s2, b1, b2, b3, b4){
  (not(s1) * not(s2) * b1) +  (not(s1) * (s2) * b2) + ((s1) * not(s2) * b3) + ((s1) * (s2) * b4) 
}

permute4(s1, s2, b1, b2, b3, b4){
  let v1 = mux4(s1, s2, b1, b2, b3, b4) in
  let v2 = mux4(s1, not(s2), b1, b2, b3, b4) in
  let v3 = mux4(not(s1), s2, b1, b2, b3, b4) in
  let v4 = mux4(not(s1), not(s2), b1, b2, b3, b4) in
  {v1 = v1; v2 = v2; v3 = v3; v4 = v4} 
}

bintables(z,x,y,ttv){
  let xwl = { t = r[x++"t"]; p = r[x++"p"] } in
  let ywl = { t = r[y++"t"]; p = r[y++"p"] } in
  let tks = { v1 = r[z++"tk1"]; v2 = r[z++"tk2"]; v3 = r[z++"tk3"]; v4 = r[z++"tk4"] } in
  let pks = { v1 = r[z++"pk1"]; v2 = r[z++"pk2"]; v3 = r[z++"pk3"]; v4 = r[z++"pk4"] } in
  let tkeys = permute4(xwl.t, ywl.t, tks.v1, tks.v2, tks.v3, tks.v4) in
  let pkeys = permute4(xwl.t, ywl.t, pks.v1, pks.v2, pks.v3, pks.v4) in
  let ttable = permute4(xwl.p, ywl.p,
       	                tkeys.v1 + mux(ttv.v00, r[z++"t"], not(r[z++"t"])),
  			tkeys.v2 + mux(ttv.v01, r[z++"t"], not(r[z++"t"])),
  			tkeys.v3 + mux(ttv.v10, r[z++"t"], not(r[z++"t"])),
  			tkeys.v4 + mux(ttv.v11, r[z++"t"], not(r[z++"t"]))) in
  let ptable = permute4(xwl.p, ywl.p,
      	                pkeys.v1 + mux(ttv.v00, r[z++"p"], not(r[z++"p"])),
  			pkeys.v2 + mux(ttv.v01, r[z++"p"], not(r[z++"p"])),
  			pkeys.v3 + mux(ttv.v10, r[z++"p"], not(r[z++"p"])),
  			pkeys.v4 + mux(ttv.v11, r[z++"p"], not(r[z++"p"]))) in 
  { tt = ttable; pt = ptable; tks = tks; pks = pks }
}

andtables(z,x,y) { bintables(z,x,y, { v00 = 0; v01 = 0; v10 = 0; v11 = 1 }) }

nandtables(z,x,y) { bintables(z,x,y, { v00 = 1; v01 = 1; v10 = 1; v11 = 0 }) }

xortables(z,x,y) { bintables(z,x,y, { v00 = 0; v01 = 1; v10 = 1; v11 = 0 }) }

ortables(z,x,y) { bintables(z,x,y, { v00 = 0; v01 = 1; v10 = 1; v11 = 1 }) }

eqtables(z,x,y) { bintables(z,x,y, { v00 = 1; v01 = 0; v10 = 0; v11 = 1 }) }

evalgate(xwv,ywv,tables) {
  let tk = mux4(xwv.t, ywv.t, tables.tks.v1, tables.tks.v2, tables.tks.v3, tables.tks.v4) in
  let pk = mux4(xwv.t, ywv.t, tables.pks.v1, tables.pks.v2, tables.pks.v3, tables.pks.v4) in
  let trow = mux4(xwv.p, ywv.p, tables.tt.v1, tables.tt.v2, tables.tt.v3, tables.tt.v4) in
  let prow = mux4(xwv.p, ywv.p, tables.pt.v1, tables.pt.v2, tables.pt.v3, tables.pt.v4) in
  { t = tk + trow; p = pk + prow } 
}

copytables(xcopy, x) {
  let xwl = { t = r[x++"t"]; p = r[x++"p"] } in
  let tks = { v1 = r[xcopy++"tk1"]; v2 = r[xcopy++"tk2"] } in
  let pks = { v1 = r[xcopy++"pk1"]; v2 = r[xcopy++"pk2"] } in
  let tkeys = permute(xwl.t, tks.v1, tks.v2) in
  let pkeys = permute(xwl.t, pks.v1, pks.v2) in
  let tt = permute(xwl.p, tkeys.v1 + r[xcopy++"t"], tkeys.v2 + not(r[xcopy++"t"])) in
  let pt = permute(xwl.p, pkeys.v1 + r[xcopy++"p"], pkeys.v2 + not(r[xcopy++"p"])) in
  { tt = tt; pt = pt; tks = tks; pks = pks }
}

evalcopy(xwv,tables) {
  let tk = mux(xwv.t, tables.tks.v1, tables.tks.v2) in 
  let pk = mux(xwv.t, tables.pks.v1, tables.pks.v2) in
  let trow = mux(xwv.p, tables.tt.v1, tables.tt.v2) in
  let prow = mux(xwv.p, tables.pt.v1, tables.pt.v2) in 
  { t = tk + trow; p = pk + prow } 
}

decodetables(z) {
  let tks = { v1 = r["decode_tk1"]; v2 = r["decode_tk2"] } in
  let tkeys = permute(r[z++"t"], tks.v1, tks.v2) in
  let tt = permute(r[z++"p"], tkeys.v1 + 0, tkeys.v2 + 1) in
  { tt = tt; tks = tks }
}

evaldecode(zwv, tables) {
  let tk = mux(zwv.t, tables.tks.v1, tables.tks.v2) in
  let trow = mux(zwv.p, tables.tt.v1, tables.tt.v2) in
  tk + trow
}

mktables(z) {
  let tt = { v1 = m[z++"tt_r1"]; v2 = m[z++"tt_r2"]; v3 = m[z++"tt_r3"]; v4 = m[z++"tt_r4"] } in
  let pt = { v1 = m[z++"pt_r1"]; v2 = m[z++"pt_r2"]; v3 = m[z++"pt_r3"]; v4 = m[z++"pt_r4"] } in
  let tk = { v1 = m[z++"tk_r1"]; v2 = m[z++"tk_r2"]; v3 = m[z++"tk_r3"]; v4 = m[z++"tk_r4"] } in
  let pk = { v1 = m[z++"pk_r1"]; v2 = m[z++"pk_r2"]; v3 = m[z++"pk_r3"]; v4 = m[z++"pk_r4"] } in
  { tt = tt; pt = pt; tks = tk; pks = pk }
}

mkdecode () {
  let tt = { v1 = m["decode_tt_r1"]; v2 = m["decode_tt_r2"] } in
  let tk = { v1 = m["decode_tk_r1"]; v2 = m["decode_tk_r2"] } in
  { tt = tt; tks = tk }
}

mkwv(x) {
  { t = m[x++"t"]; p = m[x++"p"] }
}

cmdfunctions:

andgate(z : string, x : string, y : string) {
  let tables = andtables(z,x,y) in
  m[z++"tt_r1"]@1 := tables.tt.v1@2; 
  m[z++"tt_r2"]@1 := tables.tt.v2@2; 
  m[z++"tt_r3"]@1 := tables.tt.v3@2; 
  m[z++"tt_r4"]@1 := tables.tt.v4@2; 
  m[z++"pt_r1"]@1 := tables.pt.v1@2; 
  m[z++"pt_r2"]@1 := tables.pt.v2@2; 
  m[z++"pt_r3"]@1 := tables.pt.v3@2; 
  m[z++"pt_r4"]@1 := tables.pt.v4@2; 
  m[z++"tk_r1"]@1 := tables.tks.v1@2; 
  m[z++"tk_r2"]@1 := tables.tks.v2@2; 
  m[z++"tk_r3"]@1 := tables.tks.v3@2; 
  m[z++"tk_r4"]@1 := tables.tks.v4@2; 
  m[z++"pk_r1"]@1 := tables.pks.v1@2; 
  m[z++"pk_r2"]@1 := tables.pks.v2@2; 
  m[z++"pk_r3"]@1 := tables.pks.v3@2; 
  m[z++"pk_r4"]@1 := tables.pks.v4@2 
}

xorgate(z : string, x : string, y : string) {
  let tables = xortables(z,x,y) in
  m[z++"tt_r1"]@1 := tables.tt.v1@2; 
  m[z++"tt_r2"]@1 := tables.tt.v2@2; 
  m[z++"tt_r3"]@1 := tables.tt.v3@2; 
  m[z++"tt_r4"]@1 := tables.tt.v4@2; 
  m[z++"pt_r1"]@1 := tables.pt.v1@2; 
  m[z++"pt_r2"]@1 := tables.pt.v2@2; 
  m[z++"pt_r3"]@1 := tables.pt.v3@2; 
  m[z++"pt_r4"]@1 := tables.pt.v4@2; 
  m[z++"tk_r1"]@1 := tables.tks.v1@2; 
  m[z++"tk_r2"]@1 := tables.tks.v2@2; 
  m[z++"tk_r3"]@1 := tables.tks.v3@2; 
  m[z++"tk_r4"]@1 := tables.tks.v4@2; 
  m[z++"pk_r1"]@1 := tables.pks.v1@2; 
  m[z++"pk_r2"]@1 := tables.pks.v2@2; 
  m[z++"pk_r3"]@1 := tables.pks.v3@2; 
  m[z++"pk_r4"]@1 := tables.pks.v4@2 
}

decodegate(z : string) {
  let tables = decodetables(z) in
  m["decode_tt_r1"]@1 := tables.tt.v1@2; 
  m["decode_tt_r2"]@1 := tables.tt.v2@2; 
  m["decode_tk_r1"]@1 := tables.tks.v1@2; 
  m["decode_tk_r2"]@1 := tables.tks.v2@2 
}

garbler_ingate(x : string) {
  m[x++"t"]@1 := mux(s[x], r[x++"t"], not(r[x++"t"]))@2;
  m[x++"p"]@1 := mux(s[x], r[x++"p"], not(r[x++"p"]))@2      
}

eval_ingate(x : string) {
  m[x++"t"]@1 := OT(s[x]@1, r[x++"t"], not(r[x++"t"]))@2;
  m[x++"p"]@1 := OT(s[x]@1, r[x++"p"], not(r[x++"p"]))@2      
}

main(){

  garbler_ingate("w");
  eval_ingate("x");
  garbler_ingate("y");

  andgate("z", "x", "y");
  xorgate("out", "z", "w");
  decodegate("out");
  
  let zwv = evalgate(mkwv("x"), mkwv("y"), mktables("z")) in
  let outwv = evalgate(zwv, mkwv("w"), mktables("out")) in
  out@1 := evaldecode(outwv, mkdecode())@1
}

postcondition: (
  // circuit correctness
  out@1 == (s["x"]@1 * s["y"]@2) + s["w"]@2
) 


