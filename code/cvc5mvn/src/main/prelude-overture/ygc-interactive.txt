exprfunctions:

not(x){ (x + 1) }

mux(s1, b1, b2){ (not(s1) * b1) + (s1 * b2)}

mux4(s1, s2, b1, b2, b3, b4){
  (not(s1) * not(s2) * b1) +  (not(s1) * s2 * b2) + (s1 * not(s2) * b3) + (s1 * s2 * b4) 
}

permute(s1, b1, b2){
  let v1 = (not(s1) * b1) + (s1 * b2) in
  let v2 = (not(s1) * b2) + (s1 * b1) in
  {v1 = v1; v2 = v2} 
}

permute4(s1, s2, b1, b2, b3, b4){
  let v1 = (not(s1) * not(s2) * b1) + (not(s1) * s2 * b2) + (s1 * not(s2) * b3) + (s1 * s2 * b4) in
  let v2 = (not(s1) * not(s2) * b2) + (not(s1) * s2 * b3) + (s1 * not(s2) * b4) + (s1 * s2 * b1) in
  let v3 = (not(s1) * not(s2) * b3) + (not(s1) * s2 * b4) + (s1 * not(s2) * b1) + (s1 * s2 * b2) in
  let v4 = (not(s1) * not(s2) * b4) + (not(s1) * s2 * b1) + (s1 * not(s2) * b2) + (s1 * s2 * b3) in  
  {v1 = v1; v2 = v2; v3 = v3; v4 = v4} 
}

andtable(g,p1,p2){ permute4(p1,p2,r[g],r[g],r[g],not(r[g])) }

cmdfunctions:

//
// Hack to work around lack of primitive OT
//
ot(x,c,b1,b2,ir,is){
  m[x++"foo"]@is := c@ir;
  m[x]@ir := mux(m[x++"foo"],b1,b2)@is
}

//
// Hack to work around lack of primitive OT4
//
ot4(x,c1,c2,b1,b2,b3,b4,ir,is){
  m[x++"foo"]@is := c1@ir;
  m[x++"bar"]@is := c2@ir;
  m[x]@ir := mux4(m[x++"foo"],m[x++"bar"],b1,b2,b3,b4)@is
}

main(){
  m["x"]@1 := mux(s["x"],r["x"],not(r["x"]))@2;
  m["y"]@1 := 0@2;
  ot("y",s["y"],r["y"],not(r["y"]),1,2);
  let table = andtable("z",r["x"],r["y"]) in 
  ot4("z",m["x"],m["y"],table.v1,table.v2,table.v3,table.v4,1,2);
  let decode = permute(r["z"], 0, 1) in 
  ot("out",m["z"],decode.v1,decode.v2,1,2);
  out@1 := m["out"]@1;
  m["unit"]@1 := 1@1
}

postcondition: (
  // confidentiality of 2's wire label sharing
  m["x"]@1 == s["x"]@2 + r["x"]@2 AND
  
  // sanity check on ot
  m["y"]@1 == s["y"]@1 + r["y"]@2 AND

  // correctness and confidentiality of garbled gate output
  m["z"]@1 == ((r["x"]@2 + m["x"]@1) * (r["y"]@2 + m["y"]@1)) + r["z"]@2 AND

  // circuit correctness
  out@1 == s["x"]@2 * s["y"]@1
) 


