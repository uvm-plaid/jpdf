exprfunctions:

SHARED(x) { (m[x++"s"]@1 + m[x++"s"]@2) }

IDEALF() { (s["x"]@1 + s["y"]@2) + (s["i"]@1 * s["j"]@2) }

cmdfunctions:

sshare(x:string, i1:cid, i2:cid) {
   m[x++"s"]@i2 := (s[x] + -r[x])@i1;
   m[x++"s"]@i1 := r[x]@i1
}
postcondition: ([m[x++"s"]@i1,m[x++"s"]@i2] as genshares(s[x]@1,x,i1))

precondition: ([m[x++"s"]@i1,m[x++"s"]@i2] : shares)
open(x:string) {
     p[x++"1"] := m[x++"s"]@1;
     p[x++"2"] := m[x++"s"]@2;
     m[x]@i1 := p[x++"1"] + p[x++"2"]@i1;
     m[x]@i2 := p[x++"1"] + p[x++"2"]@i2
}
postcondition: ([p[x++"1"],p[x++"2"]] : public; [m[x]@i1] : public; [m[x]@i2] : public)

_sum(z:string, x:string, y:string, i:cid) { m[z++"s"]@i := (m[x++"s"] + m[y++"s"])@i }

precondition: ([m[x++"s"]@1,m[x++"s"]@2] : shares;
               [m[y++"s"]@1,m[y++"s"]@2] : shares)
sum(z:string, x:string, y:string){ _sum(z,x,y,1); _sum(z,x,y,2) }
postcondition: ( [m[z++"s"]@1,m[z++"s"]@2] : shares),
               ( SHARED(z) == SHARED(x) + SHARED(y) )

_mult(z : string, y : string, i : cid) {
    m[z++"s"]@i := (m[z++"d"] * m[y++"s"] + -m[z++"e"] * m[z++"as"] + m[z++"cs"])@i
}

precondition: ( [m[x++"s"]@1,m[x++"s"]@2] : shares;
                [m[y++"s"]@1,m[y++"s"]@2] : shares;
	        [m[x++"as"]@1,m[x++"as"]@2] : shares;
	        [m[x++"bs"]@1,m[x++"bs"]@2] : shares;
	        [m[x++"cs"]@1,m[x++"cs"]@2] : shares ),
	       ( BEAVERTRIP(z) )
mult(z : string, x : string, y : string) {
    sum(z++"d", x, z++"a");
    open(z++"d");
    sum(z++"e", y, z++"b");
    open(z++"e");
    _mult(z,y,1); _mult(z,y,2)
}
postcondition: ( [m[z++"s"]@i1,m[z++"s"]@i2] : shares ),
               ( SHARED(z) == SHARED(x) * SHARED(y)) )

// *
// main entry point
// * 
precondition: ( [m["kas"]@1,m["kas"]@2] : shares;
	        [m["kbs"]@1,m["kbs"]@2] : shares;
	        [m["kcs"]@1,m["kcs"]@2] : shares ),
	      ( BEAVERTRIP("k") ) 
main() {
    sshare("x", 1, 2);
    sshare("y", 2, 1);
    sshare("i", 1, 2);
    sshare("j", 2, 1);
    
    sum("z","x","y");
    mult("k","i","j");
    sum("out","z","k");
    open("out")
}
postcondition: ( m["out"]@1 == IDEALF() )

constraintfunctions:

// These are Beaver triple constraints. Party 3 is a phantom just for spec.
BEAVERTRIP(x) {
  m[x++"as"]@1 == r[x++"a1"]@3 AND
  m[x++"as"]@2 == r[x++"a2"]@3 AND
  m[x++"bs"]@1 == r[x++"b1"]@3 AND
  m[x++"bs"]@2 == r[x++"b2"]@3 AND
  m[x++"cs"]@1 == ((r[x++"a1"]@3 + r[x++"a2"]@3) * (r[x++"b1"]@3 + r[x++"b2"]@3)) + -r[x++"c"]@3 AND
  m[x++"cs"]@2 == r[x++"c"]@3
}

