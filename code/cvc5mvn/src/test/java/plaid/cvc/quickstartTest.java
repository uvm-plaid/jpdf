package plaid.cvc;

import org.junit.Test;
import io.github.cvc5.*;
import plaid.ast.MessageExpr;
import plaid.ast.Str;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotEquals;

public class quickstartTest {

    /**
     *  are two numbers generated by two different term manager equal?
     */
    @Test
    public void compareElements() throws CVC5ApiException {
        TermManager termManager1 = new TermManager();
        TermManager termManager2 = new TermManager();

        Sort sort1 = termManager1.mkFiniteFieldSort("2", 10);
        Sort sort2 = termManager2.mkFiniteFieldSort("2", 10);
        Term minusOne1 = termManager1.mkFiniteFieldElem("-1", sort1, 10);
        Term minusOne2 = termManager2.mkFiniteFieldElem("-1", sort2, 10);
        assertEquals(minusOne1, minusOne2);
    }

    /**
     * are constants generated by two different termManager but having the same name equal ?
     */
    @Test
    public void compareTermsFromTwoTermManagers() throws CVC5ApiException {
        TermManager termManager1 = new TermManager();
        TermManager termManager2 = new TermManager();

        Sort sort1 = termManager1.mkFiniteFieldSort("2", 10);
        Sort sort2 = termManager2.mkFiniteFieldSort("2", 10);
        
        Term m_x_1 = termManager1.mkConst(sort1, "m_x");
        Term m_x_2 = termManager2.mkConst(sort2, "m_x");

        assertNotEquals(m_x_1, m_x_2);
    }

    /**
     * Using the same term manager, 
     * I construct a finite field constant whose name is m_x_1. 
     * Is this equal to a term with the same name constructed by TermFactory?
     */
    @Test
    public void compareTermsFromTermManagers() throws CVC5ApiException{
        TermManager tm = new TermManager();
        Sort sort = tm.mkFiniteFieldSort("2", 10);
        Term m_x_1 = tm.mkConst(sort, "m_x_1");

        TermFactory factory = new TermFactory(tm, sort);
        assertNotEquals(m_x_1, factory.toTerm(new MessageExpr(new Str("x")), 1));
    }
    
    @Test
    public void printModel() throws CVC5ApiException{
        TermManager tm = new TermManager();
        Sort sort = tm.mkFiniteFieldSort("2", 10);
        Solver solver = new Solver(tm);
        solver.setOption("produce-models", "true");
        //solver.setOption("finite-model-find", "true");

        solver.setLogic("ALL");
        solver.resetAssertions();

        // get model m[x]@1 := (s[x} + r[x])@2
        // m[x]@1 = 12
        //Term m_x_1 = tm.mkConst(sort, "m_x_1");
        Term m_x_1 = tm.mkFiniteFieldElem("1", sort,10);
        Term s_x_2 = tm.mkConst(sort, "s_x_2");
        Term r_x_2 = tm.mkConst(sort, "r_x_2");

        Term constraint1 = tm.mkTerm(Kind.EQUAL, m_x_1, tm.mkTerm(Kind.FINITE_FIELD_ADD, s_x_2, r_x_2));
        Term minusOne = tm.mkFiniteFieldElem("-1", sort, 10);
        //Term constraint1 = tm.mkTerm(Kind.EQUAL, m_x_1, tm.mkTerm(Kind.FINITE_FIELD_ADD, s_x_2, tm.mkTerm(Kind.FINITE_FIELD_MULT, r_x_2, minusOne)));
        
        //Term constraint2 = tm.mkTerm(Kind.FINITE_FIELD_ADD, s_x_2, r_x_2);
        solver.assertFormula(constraint1);

        Result r = solver.checkSat();
        //System.out.println("result: " + r);

        // get values for the memories that satisfy the constraint
        Term m_x_1_val = solver.getValue(m_x_1);
        Term s_x_2_val = solver.getValue(s_x_2);
        Term r_x_2_val = solver.getValue(r_x_2);
        //Term constraint2_val = solver.getValue(constraint2);
        //System.out.println("value for m_x_1:" + m_x_1_val);

        // convert the values to Java types
        String m_x_1_FiniteFieldValue = m_x_1_val.getFiniteFieldValue();
        String s_x_2_FiniteFieldValue = s_x_2_val.getFiniteFieldValue();
        String r_x_2_FiniteFieldValue = r_x_2_val.getFiniteFieldValue();
        //String constraint2_FiniteFieldValue = constraint2_val.getFiniteFieldValue();


        //System.out.println("finite field value for m_x_1: " + m_x_1_FiniteFieldValue);
        //System.out.println("finite field value for s_x_2: " + s_x_2_FiniteFieldValue);
        //System.out.println("finite field value for r_x_2: " + r_x_2_FiniteFieldValue);
        //System.out.println("finite field value for constraint: " + constraint2_FiniteFieldValue);
        
        

    }
}
