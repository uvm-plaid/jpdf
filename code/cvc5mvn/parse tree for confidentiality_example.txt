(program (function (fname encodegmw) ( (y n) , (y i1) , (y i2) ) { (command (command (p_expression (p_expression (memloc (messageloc m (index [ (p_expression (y n)) ])))) @ (p_expression (y i2))) := (p_expression (p_expression ( (p_expression (p_expression (memloc (secretloc s (index [ (p_expression (y n)) ])))) (binop +) (p_expression (memloc (randomloc r (index [ (p_expression (y n)) ]))))) )) @ (p_expression (y i1)))) ; (command (p_expression (p_expression (memloc (messageloc m (index [ (p_expression (y n)) ])))) @ (p_expression (y i1))) := (p_expression (p_expression (memloc (randomloc r (index [ (p_expression (y n)) ])))) @ (p_expression (y i1))))) }) (function (fname not) ( (y x) ) { (p_expression (p_expression (y x)) (binop +) (p_expression (value 1))) }) (function (fname mux4) ( (y s1) , (y s2) , (y b1) , (y b2) , (y b3) , (y b4) ) { (p_expression (p_expression (p_expression (p_expression ( (p_expression (p_expression ( (p_expression (p_expression (y s1)) (binop *) (p_expression (y s2))) )) (binop *) (p_expression (y b4))) )) (binop +) (p_expression ( (p_expression (p_expression ( (p_expression (p_expression (fname not) ( (p_expression (y s1)) )) (binop *) (p_expression (y s2))) )) (binop *) (p_expression (y b3))) ))) (binop +) (p_expression ( (p_expression (p_expression ( (p_expression (p_expression (y s1)) (binop *) (p_expression (fname not) ( (p_expression (y s2)) ))) )) (binop *) (p_expression (y b2))) ))) (binop +) (p_expression ( (p_expression (p_expression ( (p_expression (p_expression (fname not) ( (p_expression (y s1)) )) (binop *) (p_expression (fname not) ( (p_expression (y s2)) ))) )) (binop *) (p_expression (y b1))) ))) }) (function (fname andtablegmw) ( (y x) , (y y) , (y z) ) { (p_expression let (y r11) = (p_expression (p_expression (p_expression (memloc (randomloc r (index [ (p_expression (y z)) ])))) (binop +) (p_expression ( (p_expression (p_expression (memloc (messageloc m (index [ (p_expression (y x)) ])))) (binop +) (p_expression (value 1))) ))) (binop *) (p_expression ( (p_expression (p_expression (memloc (messageloc m (index [ (p_expression (y y)) ])))) (binop +) (p_expression (value 1))) ))) in (p_expression let (y r10) = (p_expression (p_expression (p_expression (memloc (randomloc r (index [ (p_expression (y z)) ])))) (binop +) (p_expression ( (p_expression (p_expression (memloc (messageloc m (index [ (p_expression (y x)) ])))) (binop +) (p_expression (value 1))) ))) (binop *) (p_expression ( (p_expression (p_expression (memloc (messageloc m (index [ (p_expression (y y)) ])))) (binop +) (p_expression (value 0))) ))) in (p_expression let (y r01) = (p_expression (p_expression (p_expression (memloc (randomloc r (index [ (p_expression (y z)) ])))) (binop +) (p_expression ( (p_expression (p_expression (memloc (messageloc m (index [ (p_expression (y x)) ])))) (binop +) (p_expression (value 0))) ))) (binop *) (p_expression ( (p_expression (p_expression (memloc (messageloc m (index [ (p_expression (y y)) ])))) (binop +) (p_expression (value 1))) ))) in (p_expression let (y r00) = (p_expression (p_expression (p_expression (memloc (randomloc r (index [ (p_expression (y z)) ])))) (binop +) (p_expression ( (p_expression (p_expression (memloc (messageloc m (index [ (p_expression (y x)) ])))) (binop +) (p_expression (value 0))) ))) (binop *) (p_expression ( (p_expression (p_expression (memloc (messageloc m (index [ (p_expression (y y)) ])))) (binop +) (p_expression (value 0))) ))) in (p_expression { (l row1) = (p_expression (y r11)) ; (l row2) = (p_expression (y r10)) ; (l row3) = (p_expression (y r01)) ; (l row4) = (p_expression (y r00)) }))))) }) (function (fname andgmw) ( (y z) , (y x) , (y y) ) { (command (command (p_expression let (y table) = (p_expression (fname andtablegmw) ( (p_expression (y x)) , (p_expression (y y)) , (p_expression (y z)) )) in (p_expression (p_expression (memloc (messageloc m (index [ (p_expression (y x)) ])))) @ (p_expression (value 1)))) := (p_expression (p_expression (memloc (messageloc m (index [ (p_expression (y x)) ])))) @ (p_expression (value 2)))) ; (command (command (p_expression (p_expression (memloc (messageloc m (index [ (p_expression (y y)) ])))) @ (p_expression (value 1))) := (p_expression (p_expression (memloc (messageloc m (index [ (p_expression (y y)) ])))) @ (p_expression (value 2)))) ; (command (command (p_expression (p_expression (memloc (messageloc m (index [ (p_expression (y z)) ])))) @ (p_expression (value 2))) := (p_expression (p_expression (fname mux4) ( (p_expression (memloc (messageloc m (index [ (p_expression (y x)) ])))) , (p_expression (memloc (messageloc m (index [ (p_expression (y y)) ])))) , (p_expression (p_expression (y table)) . (l row1)) , (p_expression (p_expression (y table)) . (l row2)) , (p_expression (p_expression (y table)) . (l row3)) , (p_expression (p_expression (y table)) . (l row4)) )) @ (p_expression (value 1)))) ; (command (p_expression (p_expression (memloc (messageloc m (index [ (p_expression (y z)) ])))) @ (p_expression (value 1))) := (p_expression (p_expression (memloc (randomloc r (index [ (p_expression (y z)) ])))) @ (p_expression (value 1))))))) }) (function (fname xorgmw) ( (y z) , (y x) , (y y) ) { (command (command (p_expression (p_expression (memloc (messageloc m (index [ (p_expression (y z)) ])))) @ (p_expression (value 1))) := (p_expression (p_expression ( (p_expression (p_expression (memloc (messageloc m (index [ (p_expression (y x)) ])))) (binop +) (p_expression (memloc (messageloc m (index [ (p_expression (y y)) ]))))) )) @ (p_expression (value 1)))) ; (command (p_expression (p_expression (memloc (messageloc m (index [ (p_expression (y z)) ])))) @ (p_expression (value 2))) := (p_expression (p_expression ( (p_expression (p_expression (memloc (messageloc m (index [ (p_expression (y x)) ])))) (binop +) (p_expression (memloc (messageloc m (index [ (p_expression (y y)) ]))))) )) @ (p_expression (value 2))))) }) (function (fname decodegmw) ( (y z) ) { (command (command (p_expression (memloc (publicloc p (index [ (p_expression (value "1")) ])))) := (p_expression (p_expression (memloc (messageloc m (index [ (p_expression (y z)) ])))) @ (p_expression (value 1)))) ; (command (command (p_expression (memloc (publicloc p (index [ (p_expression (value "2")) ])))) := (p_expression (p_expression (memloc (messageloc m (index [ (p_expression (y z)) ])))) @ (p_expression (value 2)))) ; (command (command (p_expression (value (o_variable out @ 1))) := (p_expression (p_expression ( (p_expression (p_expression (memloc (publicloc p (index [ (p_expression (value "1")) ])))) (binop +) (p_expression (memloc (publicloc p (index [ (p_expression (value "2")) ]))))) )) @ (p_expression (value 1)))) ; (command (p_expression (value (o_variable out @ 2))) := (p_expression (p_expression ( (p_expression (p_expression (memloc (publicloc p (index [ (p_expression (value "1")) ])))) (binop +) (p_expression (memloc (publicloc p (index [ (p_expression (value "2")) ]))))) )) @ (p_expression (value 2))))))) }) (function (fname main) ( ) { (command (command (fname encodegmw) ( (p_expression (value "x")) , (p_expression (value 2)) , (p_expression (value 1)) )) ; (command (command (fname encodegmw) ( (p_expression (value "y")) , (p_expression (value 2)) , (p_expression (value 1)) )) ; (command (command (fname encodegmw) ( (p_expression (value "z")) , (p_expression (value 1)) , (p_expression (value 2)) )) ; (command (command (fname andgmw) ( (p_expression (value "g1")) , (p_expression (value "x")) , (p_expression (value "z")) )) ; (command (command (fname xorgmw) ( (p_expression (value "g2")) , (p_expression (value "g1")) , (p_expression (value "y")) )) ; (command (fname decodegmw) ( (p_expression (value "g2")) ))))))) }) <EOF>)
