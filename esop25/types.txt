======
Typing
======

G,E |- f(s1,...,sn) : [{},{f(s1,...,sn)}]

G,E |- m : G(m)

G,E |- r : [{r},{}]

G,E |- e : [R,X]
-----------------
G,E |- -e : [R,X]

G,E |- e1 : [R1,X1]
G,E |- e2 : [R2,X2]
R = (R1 - (R2 u X2) u (R2 - (R1 u X1))
X = (R1 u R2 u X1 u X2) - R
------------------------------
G,E |- e1 + e2 : [R,X]

G,E |- e1 : [R1,X1]
G,E |- e2 : [R2,X2]
------------------------------
G,E |- e1 op e2 : [{}, R1 u R2 u X1 u X2]

E |= e == e'    G,E |- e' : T
-----------------------------
G,E |- e : T


G,E|- e : T
--------------------------
G,E |- x := e : (G; x : T)

G1,E |- c1 : G2   G2,E |- c2 : G3
---------------------------------
G1,E |- c1;c2 : G3 

==========
Metatheory
==========

Defn: Given c,E,G with c |= E and 0,E |- c : G. Then for all C,
    view(G,E,C,c) =  U_{X \in (pow(vars(c)_C) - {})} T such that G,E |- \Sum_{x \in X} x : T.

Defn: revealed(T,H) = { f(s@i1,...,s@in) | [{}, D] \in T /\ f(s@i1,...,s@in) \in D /\ \exists i \in 1..n . i \in H }

Thm: Given c,E,G with c |= E and 0,E |- c : G. Then c satisfies NIMO for F if for all H,C we have
revealed(view(G,E,C,c), H) = { F }.

==========
Strategies
==========

Defn: U(R,T) = [R,T] where R <> {}.

E |= e1 + e2 = e
G,E |- e1 : U(R,D1) G,E |- e2 : U(R,D2)
-----------------------------------------
G,E |- [e1,e2] : shares(R, e)


G,E |- [mux4(_r[xt]@1,r[_yt]@1,tks) + mux4(r[_xp]@1,r[_yp]@1,tt),
        r[zt]@2] : shares(r[zt]@2, (r[_xt]@1 + r[xt]@2) op (r[_yt]@1 + r[yt]@2))
	
G,E |- [mux4(_r[xt]@1,r[_yt]@1,pks) + mux4(r[_xp]@1,r[_yp]@1,pt),
        r[zp]@2] : shares(r[zp]@2, (r[_xp]@1 + r[xp]@2) op (r[_yp]@1 + r[yp]@2))

G,E |- tks : R1, pks : R2 
--------------------------------------------------------------------------------
G,E |- tt,pt,tks,pks : gate(R1;R2;r[zt]@2;r[zp]@2)

E |= mux(_r[zt]@1, tks) + mux(r[_zp]@1, tt)  == _r[zt]@1 + r[zt]@2
G,E |- tks : R
------------------------------------------------------------------
G,E |- tt,tks : decoder(z,R)


G,E |- m@i : noise(R,i)
-----------------------
G,E |- [m@i] : R, noise

G,E |- tt,pt,tks,pks : gate(R)
---------------------------------
G,R |- [tt,pt,tks,pks] : R, noise

G,E |- [p1,p2] : shares(e)
--------------------------------
G,E |- [p1,p2] : {}, reveal(e)

G,E |- d : decoder(z,R)
G,E |- [e@1,rzt@2] : shares(f(s1,...,sn))
E |= p == e@1 + rzt@2
-----------------------------------------
G,E |- [d,p] : R, reveal(f(s1,...,sn))

========
FINALLY?
========


genshares(x,i) = {r[x]@i}, s[x] - r[x]@i, r[x]@i

recon(e1,e2) = e1 + e2


E |= genshares(s,i) = R2,x,e2
----------------------------------------
G,E,R1 |- [x] : R1;R2, G;[x,e2] : shares

G,E |- [p1,p2] : shares
---------------------------------------------------
G,E,R |- [p1,p2] : R1;R2, G;[recon(p1,p2)] : public

G1,E,R1 |- c1 : R2,G2   G2,E,R2 |- c2 : R3,G3
---------------------------------------------
G1,E,R1 |- c1;c2 : R3;G3


G,E |- v : G(v)

G,E |- [e1,e2] : shares
G,E |- [e1',e2'] : shares
-------------------------------
G,E |- [e1+e1',e2+e2'] : shares

G,E |- [e1,e2] : shares
G,E |- [e] : public
---------------------------
G,E |- [e1 + e,e2] : shares

G,E |- [e1,e2] : shares
G,E |- [e] : public
-------------------------------
G,E |- [e1 * e,e2 * e] : shares


========
Examples
========

m12 := s1 - rl1 - r1
m13 := r1
m21 := s2 - rl2 - r2
m23 := r2
m31 := s3 - rl3 - r3
m32 := r3

==
TYPES

m12 : U(r1,{s1})
m13 : U(r1,{})

m21 : U(r2,{s2})
m23 : U(r2,{})

m31 : U(r3,{s3})
m32 : U(r3,{})

==
SHARE CLOSURES

m12 + m13 == s1 - rl1
m12 + m13 : U(rl1,{s1})

m21 + m23 == s2 - rl2
m21 + m23 : U(rl2,{s2})

m31 + m32 == s3 - rl3
m31 + m32 : U(rl3,{s3})

m23 + m32 + m12 + m13 : U(r2+r3+rl1,{s1})
==

p1 := m31 + m21 + rl1
p2 := m12 + m32 + rl2
p3 := m13 + m23 + rl3
out := p1 + p2 + p3

==
TYPES

p1 := U(r3+r2+rl1,{s3,rl3,s2,rl2})
p2 := U(r1+r3+rl2,{s3,rl3,s1,rl1})
p3 := U(r1+r2+rl3,{s2,rl2,s1,rl1})
==
CLOSURES

p1 + p2 + p3 : [{},{s1+s2+s3}]
out : [{},{s1+s2+s3}]
m23 + m32 + m12 + m13 + p1 : [{},{s1+s2+s3}]
m21 + m31 + m23 + m13 + p2 : [{},{s1+s2+s3}]
m21 + m31 + m12 + m32 + p3 : [{},{s1+s2+s3}]



ma@1 := ra - r@3
ma@2 := r@3

mx@1 := s - r@2
max@1 := r + ma@2

ma1 : [{r3},{ra2}]
mx1 : [{r2},{s2}]
max1 : [{r2},{r3}]

ma1 + mx1 : [{r2,r3},{ra2,s2}], etc.

ma1 + mx1 + max1 : [{},{r2,r3,ra2,s2}] 

BUT ALSO...

ma1 + mx1 + max1 == ra3 + s2
ma1 + mx1 + max1 : [{ra3},{s2}]

=======
Prelude
=======

copygate(x,y)
{
   m[y++"tmp"]@1 := m[x] - r[y]@2;
   m[y++"tmp"]@2 := m[x] - r[y]@1;
   m[y]@1 ::= m[y++"tmp"] + r[y]@1;
   m[y]@2 ::= m[y++"tmp"] + r[y]@2
}
postcondition : ([m[y]@1,m[y]@2] : shares(m[x]@1 + m[x]@2))
